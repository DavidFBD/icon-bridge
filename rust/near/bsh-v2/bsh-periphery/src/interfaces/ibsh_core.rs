use near_sdk::ext_contract;

/**
  @title Interface of BSHCore contract
  @dev This contract is used to handle coin transferring service
  Note: The coin of following interface can be:
  Native Coin : The native coin of this chain
  Wrapped Native Coin : A tokenized ERC1155 version of another native coin like ICX
*/
#[ext_contract]
pub trait IbshCore {
    /**
       @notice Adding another Onwer.
       @dev Caller must be an Onwer of BTP network
       @param owner    Address of a new Onwer.
    */
    fn add_owner(&mut self, owner: AccountId);

    /**
       @notice Removing an existing Owner.
       @dev Caller must be an Owner of BTP network
       @dev If only one Owner left, unable to remove the last Owner
       @param owner    Address of an Owner to be removed.
    */
    fn remove_owner(&mut self, owner: AccountId);

    /**
       @notice Checking whether one specific address has Owner role.
       @dev Caller can be ANY
       @param owner    Address needs to verify.
    */
    fn is_owner(&self, owner: AccountId) -> bool;

    /**
       @notice Get a list of current Owners
       @dev Caller can be ANY
       @return      An array of addresses of current Owners
    */
    fn get_owners(&self) -> Option<Vec<AccountId>>;

    /**
       @notice update BSH Periphery address.
       @dev Caller must be an Owner of this contract
       bshPeriphery Must be different with the existing one.
       @param bsh_periphery    BSHPeriphery contract address.
    */
    fn update_bsh_periphery(&mut self, bsh_periphery: AccountId);

    /**
       @notice update base uri.
       @dev Caller must be an Owner of this contract
       the uri must be initilized in construction.
       @param new_uri    new uri
    */
    fn update_uri(&mut self, new_uri: AccountId);

    /**
       @notice set fee ratio.
       @dev Caller must be an Owner of this contract
       The transfer fee is calculated by fee_numerator/FEE_DEMONINATOR.
       The fee_numetator should be less than FEE_DEMONINATOR
       fee_numerator is set to `10` in construction by default, which means the default fee ratio is 0.1%.
       @param fee_numerator    the fee numerator
    */
    fn set_fee_ratio(&mut self, fee_numerator: u64);

    /**
       @notice set Fixed Fee.
       @dev Caller must be an Owner
       @param fixed_fee    A new value of Fixed Fee
    */
    fn set_fixed_fee(&mut self, fixed_fee: u64);

    /**
       @notice Registers a wrapped coin and id number of a supporting coin.
       @dev Caller must be an Owner of this contract
       name Must be different with the native coin name.
       @dev 'id' of a wrapped coin is generated by using keccak256
         'id' = 0 is fixed to assign to native coin
       @param name    Coin name.
    */
    fn register(&mut self, name: String);

    /**
       @notice Return all supported coins names
       @dev
       @return   An array of strings.
    */
    fn get_coin_names(&self) -> Option<Vec<String>>;

    /**
       @notice  Return an id number of Coin whose name is the same with given coin_name.
       @dev     Return None if not found.
       @return  An ID number of coin_name.
    */
    fn get_coin_id(&self, coin_name: String) -> Option<u64>;

    /**
       @notice  Check Validity of a coin_name
       @dev     Call by BSHPeriphery contract to validate a requested coin_name
       @return  true of false
    */
    fn is_valid_coin(&self, coin_name: String) -> bool;

    /**
       @notice  Return a usable/locked/refundable balance of an account based on coin_name.
       @return  Usable balance, the balance that users are holding.
       @return  Locked balance, when users transfer the coin,
               it will be locked until getting the Service Message Response.
       @return  Refundable balance, the balance that will be refunded to users.
    */
    fn get_balance_of(&self, owner: AccountId, coin_name: String) -> (u128, u128, u128);

    /**
       @notice Return a list Balance of an account.
       @dev The order of request's coin_names must be the same with the order of return balance
       Return 0 if not found.
       @return  An array of Usable Balances
       @return  An array of Locked Balances
       @return  An array of Refundable Balances
    */
    fn get_balance_of_batch(
        &self,
        owner: AccountId,
        coin_names: Vec<String>,
    ) -> (Vec<u128>, Vec<u128>, Vec<u128>);

    /**
       @notice Return a list accumulated Fees.
       @dev Only return the asset that has Asset's value greater than 0
       @return  An array of Asset
    */
    fn get_accumulated_fees(&self) -> Vec<Asset>;

    /**
       @notice Allow users to deposit `value` native coin into a BSHCore contract.
       @dev MUST specify value
       @param to  An address that a user expects to receive an amount of tokens.
    */
    #[payable]
    fn transfer_native_coin(&mut self, to: AccountId);

    /**
       @notice Allow users to deposit an amount of wrapped native coin `coin_name` from the `env::signer_account_id` address into the BSHCore contract.
       @dev Caller must set to approve that the wrapped tokens can be transferred out of the `env::signer_account_id` account by BSHCore contract.
       It MUST revert if the balance of the holder for token `coin_name` is lower than the `value` sent.
       @param coin_name    A given name of a wrapped coin
       @param value        An amount request to transfer.
       @param to           Target BTP address.
    */
    fn transfer(&mut self, coin_name: String, value: u128, to: AccountId);

    /**
       @notice Allow users to transfer multiple coins/wrapped coins to another chain
       @dev Caller must set to approve that the wrapped tokens can be transferred out of the `env::signer_account_id` account by BSHCore contract.
       It MUST revert if the balance of the holder for token `coin_name` is lower than the `value` sent.
       In case of transferring a native coin, it also checks `value` with `values[i]`
       It MUST revert if `value` is not equal to `values[i]`
       The number of requested coins MUST be as the same as the number of requested values
       The requested coins and values MUST be matched respectively
       @param coin_names   A list of requested transferring coins/wrapped coins
       @param values       A list of requested transferring values respectively with its coin name
       @param to           Target BTP address.
    */
    #[payable]
    fn transfer_batch(&mut self, coin_names: Vec<String>, values: Vec<u128>, to: AccountId);

    /**
        @notice Reclaim the token's refundable balance by an owner.
        @dev Caller must be an owner of coin
        The amount to claim must be smaller or equal than refundable balance
        @param coin_name   A given name of coin
        @param value       An amount of re-claiming tokens
    */
    fn reclaim(&mut self, coin_name: String, value: u128);

    /**
        @notice mint the wrapped coin.
        @dev Caller must be a BSHPeriphery contract
        Invalid coin_name will have an id = 0. However, id = 0 is also dedicated to Native Coin
        Thus, BSHPeriphery will check a validity of a requested coin_name before calling
        for the coin_name indicates with id = 0, it should send the Native Coin (Example: PRA) to user account
        @param to          The account receive the minted coin
        @param coinName    Coin name
        @param value       The minted amount
    */
    fn mint(&mut self, to: AccountId, coin_name: String, value: u128);

    /**
        @notice Handle a request of Fee Gathering
        @dev    Caller must be an BSHPeriphery contract
        @param  fa    BTP Address of Fee Aggregator
    */
    fn transfer_fees(&mut self, fa: AccountId);

    /**
        @notice Handle a response of a requested service
        @dev Caller must be an BSHPeriphery contract
        @param requester   An address of originator of a requested service
        @param coin_name    A name of requested coin
        @param value       An amount to receive on a destination chain
        @param fee         An amount of charged fee
    */
    fn handle_response_service(
        &mut self,
        requester: AccountId,
        coin_name: String,
        value: u128,
        fee: u128,
        rsp_code: usize,
    );
}
