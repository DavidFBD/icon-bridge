use bmv_icon::BtpMessageVerifier;
use hex::{decode, encode};
use libraries::{rlp, types::messages, types::BTPAddress, MerklePatriciaTree};
use near_sdk::{testing_env, PromiseOrValue, VMContext};
pub mod accounts;
use accounts::*;
use near_sdk::env;
use near_sdk::json_types::U64;
use near_sdk::AccountId;
use std::convert::TryFrom;
use std::ops::Deref;
use libraries::types::Hash;
use near_sdk::borsh::BorshSerialize;

#[cfg(feature = "testable")]
use bmv_icon::types::{RelayMessage, Sha256, Validators};

fn get_context(
    input: Vec<u8>,
    is_view: bool,
    signer_account_id: AccountId,
    storage_usage: u64,
    prepaid_gas: u64,
) -> VMContext {
    VMContext {
        current_account_id: alice().to_string(),
        signer_account_id: signer_account_id.to_string(),
        signer_account_pk: vec![0, 1, 2],
        predecessor_account_id: signer_account_id.to_string(),
        input,
        block_index: 0,
        block_timestamp: 0,
        account_balance: 0,
        account_locked_balance: 0,
        storage_usage,
        attached_deposit: 0,
        prepaid_gas,
        random_seed: vec![0, 1, 2],
        is_view,
        output_data_receivers: vec![],
        epoch_height: 19,
    }
}

#[test]
#[cfg(feature = "testable")]
fn handle_relay_message() {
    let context =
        |v: AccountId, gas: u64| (get_context(vec![], false, v, env::storage_usage(), gas));
    testing_env!(context(alice(), 999_999_999_999_999_999_9));

    let mut contract = BtpMessageVerifier::new(
        alice(),
        "0x2.icon".to_string(),
        Validators::try_from("0xf901fa9500e45ef7de9eef0200a4090e57d6b92f40377eaea19500e21a90699ce258a01b8b4b5b00984163bff7affc9500cddf5733929ee06b98eef590157ac06db609ff239500cd83400d8c2331b28ea6a41e28efcb90fea2308d9500c513e4772b9e7a8cebf0479ef984bb2fed79738e9500b302f1147dab852e5b55b6b35ea79f810838f59195007d988272c3eb62500843fb64fc9feccbc604c55a950079e692813dfb510b8184dc132986974f20cbad37950073dbec60e200a741d607b4e1233ca347a7d05df695006f36c0b3c0a2ee1bd33a888f84b6dedc79f7052a9500671e16197d321ca12e5a560f48aa1a1b925faf1b950065fce9c0040489cf28d221f92e61a8687cf2bf2d9500657997be01c2c722776aa86aeb1faab99b17367d95004d4acd34c79a6b3cee9be4a49989f0e37f6c5c3195004bae569c98bf2fe69ec71e2e9d1b5189fdd47cf995004417d5d6a6aff9b7379a54332bcc0492c8f211e7950040abb59013b011c98d880314db92d762fab3ee1595003fb286b352c35d229113bb72fdd7b65da4826ad0950024158e77bae2b3e90b9ae554e5da28f5629b0f8b95001f7578266186c6e7b6b4be0ccd5d3a3829e98d939500193548d3b36f41faddac75fc3491eb4701182927950010f6b0079c455d5b766e02e460996e1872f45f549500eb974e03a77214eb3ca4acb9a28f7edb17113513".to_string())
        .unwrap(),
        U64(7420493),
        Hash::try_from("0x2a825ff6e97ffc59ebdc170a315aa10c7bd21afe3b0482ab0c676116871d6ff5".to_string()).unwrap()
    );
    let relay_message = RelayMessage::try_from("".to_string()).unwrap();

    testing_env!(context(alice(), 999_999_999_999_999_999_9));

    let response = contract.handle_relay_message(
        BTPAddress::new(format!(
            "btp://0x1.near/7448a64f98a7f2ca3e4e292dd18984ef4466e0e7739fbc7add59f7a580630c6d"
        )),
        BTPAddress::new(
            "btp://0x2.icon/cxda4e4a3829860f12470125c66f259ed7b3f62206".to_string(),
        ),
        0,
        relay_message,
    );
}
